pipeline {
    agent any

    tools {
        maven 'maven3'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/jaiswaladi246/Task-Master-Pro.git'
            }
        }
        stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('Unit Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectName=taskmaster \
                        -Dsonar.projectKey=taskmaster \
                        -Dsonar.java.binaries=target
                    """
                }
            }
        }
        stage('Package') {
            steps {
                sh 'mvn package'
            }
        }
        stage('Docker Build & Tag') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker build -t soheldev/todomaster:latest .'
                    }
                }
            }
        }
        stage('Trivy') {
            steps {
                sh 'trivy image --format table -o image.html soheldev/todomaster:latest'
            }
        }
        stage('Docker Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker push soheldev/todomaster:latest'
                    }
                }
            }
        }
        stage('K8 Deploy') {
            steps {
                withKubeConfig(
                    caCertificate: '', 
                    clusterName: 'my-eks', 
                    contextName: '', 
                    credentialsId: 'k8-cred', 
                    namespace: 'webapps', 
                    restrictKubeConfigAccess: false, 
                    serverUrl: 'https://79FAFC7FB71E494076132E2D132F2F05.gr7.eu-west-1.eks.amazonaws.com'
                ) {
                    sh 'kubectl apply -f deployment-service.yml'
                    sleep 30
                }
            }
        }
        stage('K8 Deploy Verification') {
            steps {
                withKubeConfig(
                    caCertificate: '', 
                    clusterName: 'my-eks', 
                    contextName: '', 
                    credentialsId: 'k8-cred', 
                    namespace: 'webapps', 
                    restrictKubeConfigAccess: false, 
                    serverUrl: 'https://79FAFC7FB71E494076132E2D132F2F05.gr7.eu-west-1.eks.amazonaws.com'
                ) {
                    sh 'kubectl get pods -n webapps'
                    sh 'kubectl get svc -n webapps'
                }
            }
        }
    }
}

